#!/bin/bash
printf '%s\n' "-------------------------------"
printf '%s\n' "     Configuring Variables     "
printf '%s\n' "-------------------------------"
# version 1.1
#changes: (202105)
# new variables (see below):
# export TAGKEY1="owner"    # could also use "user"
# export TAGVALUE1="chrisV" # your username or anything you want
# version 1.2
#changes: (202110)
# new variables (see below):
# export C1AUTH="could be accountbased (=account&username-based authenticated to C1) or emailbased(=authenticated to C1 with email address)"
# export C1REGION="could be us-1,in-1, gb-1, jp-1, de-1,au-1; only used when $C1AUTH=email "
# export C1APIKEY='your_CloudOne_API_Key; either created in C1WS (in case of legacy auth.) or in C1 (in case of email auth.)'
# export C1URL="https://cloudone.trendmicro.com"
# export C1AUTHHEADER="api-secret-key: ${C1APIKEY}"


#enter your configuration variables in this file
#save it without the .sample extension
#make sure it is executable

printf '%s' "Defining variables... "
#### ---------------------------------------------------------------------------
#### ----------below this line are settings which MUST be customised  ----------
#### ---------------------------------------------------------------------------

# update 202110
export C1AUTH="could be \"accountbased (=account&username-based authenticated to C1) or emailbased(=authenticated to C1 with email address)"
export C1REGION="could be us-1,in-1, gb-1, jp-1, de-1,au-1; only used when $C1AUTH=email "
export C1APIKEY='your_CloudOne_API_Key; either created in C1WS (in case of legacy auth.) or in C1 (in case of email auth.)'
export C1URL="https://cloudone.trendmicro.com"


# C1CS (update 20210315)
# if you do not have access to C1CS-Runtime option (which is in preview now; March 2021), 
# then set the following variable to "false".  
# If the variable does not exist, it will be set to "true" (meaning you have access to C1CS-runtime)
# this is for compatibility reasons with older versions of this script

export C1CS_RUNTIME="false"
export C1URL="https://cloudone.trendmicro.com"
export C1AUTHHEADER="api-secret-key: ${C1APIKEY}"

#  AWS settings
export AWS_PROJECT='cloudone01'    #may only contain lowercase and trailing numbers, but no "-", no "_", nor any special characters.
export AWS_EKS_NODES='2'
# remember to run AWS configure first.  The scripts will pull the AWS keys and region from the AWS configure

# Deep Security Smart Check settings (used for pre-runtime scanning)
#Note: AC=ActivationCode or License Key for SmartCheck
export DSSC_AC='xx-xxxx-xxxxx-xxxxx-xxxxx-xxxxx-xxxxx'

# Cloud One Application Security settings (used for runtime protection)
# Those are the keys that you get when you have created a "group" for the MoneyX app in CloudOne Application Security
export TREND_AP_KEY='your_trend_key_for_cloudOne_Application_Security'
export TREND_AP_SECRET='your_trend_secret_for_cloudOne_Application_Security'

#Cloud One Container Security Settings (for Admission Control)
# see https://cloudone.trendmicro.com/docs/container-security/api-key-create/
export C1APIKEY='your_CloudOne_API_Key; for now you have to create this key in DSaaS aka C1WS'

# Dockerhub account information (required to do "authenticated pulls" from docker to get a higher max-pull limit)
export DOCKERHUB_USERNAME='your username of your (free) account on hub.docker.com'
export DOCKERHUB_PASSWORD='your password of your (free) account on hub.docker.com'

# Deep Security Smart Check(part1) settings (for pre-runtime scanning)
export DSSC_REGPASSWORD='Tr3ndm1cr0!'  #DO CHANGE THIS do NOT use any "\" in the passwords
export DSSC_PASSWORD='Tr3ndm1cr0!'     #DO CHANGE THIS do NOT use any "\" in the passwords

#### --------------------------------------------------------------------------------------
#### -----below this line are default settings which may be optionally customised----------
#### --------------------------------------------------------------------------------------

# Tags (you may customise these tags to your liking; both the Key and the Value)
# Other than these, one more tag is added.  That third keypair is for use by the script only
export TAGKEY1="owner"           # or use anything you like, except c1OnAws (that's an O not a zero)
export TAGVALUE1="${C9_USER}"    # or anything you like; ${C9_USER} is a predefined Cloud9 variable
export TAGKEY2="user"            # or anything you like, except c1OnAws (that's an O not a zero)
export TAGVALUE2="${C9_USER}"    # or anything you like; ${C9_USER} is a predefined Cloud9 variable

# Deep Security Smart Check) settings (for pre-runtime scanning)
export DSSC_NAMESPACE='smartcheck' #Namespace to deploy SmartCheck'
export DSSC_USERNAME='administrator'
export DSSC_TEMPPW='justatemppw'   #this temp pw will be overwritten by the DSSC_PASSWORD; it must be different from the DSSC_PASSWORD; 
export DSSC_HOST='will be generated by this script'
export DSSC_REGUSER='administrator'

####---------------------------------------------------------------------------------------
####------do not edit below this line (unless you really know what you are doing)----------
####---------------------------------------------------------------------------------------

# APPS  #those apps have been tested and work
# using distinct variables as exporting arrays in bash is still troublesome
export APP_GIT_URL1='https://github.com/cvdabbeele/c1-app-sec-moneyx.git'
export APP_GIT_URL2='https://github.com/cvdabbeele/troopers.git'
export APP_GIT_URL3='https://github.com/cvdabbeele/mydvwa.git'

# Generating names for Apps, Stack, Pipelines, ECR, CodeCommit repo,..."
#generate the names of the apps from the git URL
export APP1=`echo ${APP_GIT_URL1} | awk -F"/" '{print $NF}' | awk -F"." '{ print $1 }' | tr -cd '[:alnum:]'| awk '{ print tolower($1) }'`
export APP2=`echo ${APP_GIT_URL2} | awk -F"/" '{print $NF}' | awk -F"." '{ print $1 }' | tr -cd '[:alnum:]'| awk '{ print tolower($1) }'`
export APP3=`echo ${APP_GIT_URL3} | awk -F"/" '{print $NF}' | awk -F"." '{ print $1 }' | tr -cd '[:alnum:]'| awk '{ print tolower($1) }'`

#systemTAGs; do not change  (mainly used to cleanup the environment)
export TAGKEY0="c1onaws"    
export TAGVALUE0="${AWS_PROJECT}" 