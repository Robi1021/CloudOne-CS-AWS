#!/bin/bash
printf '%s \n'  "-----------------------------------------"
printf '%s \n'  "     Creating / Checking EKS cluster     "
printf '%s \n'  "-----------------------------------------"

# Check required variables
varsok=true

if  [ -z "$AWS_REGION" ]; then echo AWS_REGION must be set && varsok=false; fi
if  [ -z "${C1PROJECT}" ]; then echo C1PROJECT must be set && varsok=false; fi
#if  [ -z "$AWS_CODECOMMIT_REPO" ]; then echo AWS_CODECOMMIT_REPO must be set && varsok=false; fi
if  [ -z "$AWS_EKS_NODES" ]; then echo AWS_EKS_NODES must be set && varsok=false; fi
#if  [ -z "$AWS_EKS_CLUSTERNAME" ]; then echo AWS_EKS_CLUSTERNAME must be set && varsok=false; fi

if  [ "$varsok" = false ]; then printf '%s\n' "Missing variables" && exit ; fi

aws_cluster_exists="false"
aws_clusters=( `eksctl get clusters -o json| jq '.[].metadata.name'` ) 
for i in "${!aws_clusters[@]}"; do
  #printf "%s" "cluster $i =  ${aws_clusters[$i]}.........."
  if [[ "${aws_clusters[$i]}" =~ "${C1PROJECT}" ]]; then
      #printf "%s\n" "Reusing existing EKS cluster:  ${C1PROJECT}"
      aws_cluster_exists="true"
      break
  fi
done
 
if [[ "${aws_cluster_exists}" = "true" ]]; then
    printf "%s\n" "Reusing existing EKS cluster  ${C1PROJECT}"
else
    printf '%s\n' "Creating file: work/${C1PROJECT}EksCluster.yml..."
    cat << EOF > work/${C1PROJECT}EksCluster.yml
# This file is (re-) generated by code.
# Any manual changes will be overwritten.
apiVersion: eksctl.io/v1alpha5
kind: ClusterConfig
metadata:
  name: ${C1PROJECT}
  region: ${AWS_REGION}
  tags:
    ${TAGKEY0}: ${TAGVALUE0}
    ${TAGKEY1}: ${TAGVALUE1}
    ${TAGKEY2}: ${TAGVALUE2}
managedNodeGroups:
  - name: nodegroup
    desiredCapacity: ${AWS_EKS_NODES}
    iam:
      withAddonPolicies:
        albIngress: true
    tags:
      ${TAGKEY1}: ${TAGVALUE1}
      ${TAGKEY2}: ${TAGVALUE2}
EOF
    start_time="$(date -u +%s)"
    printf '%s\n' "Creating a ${AWS_EKS_NODES}-node eks cluster named: ${C1PROJECT} in region ${AWS_REGION}"
    printf '%s\n' "This may take up to 20 minutes... (started at:`date`)"
    starttime=`date +%s`
    eksctl create cluster -f work/${C1PROJECT}EksCluster.yml   #non-fargate EKS cluster
    if [ "$?" != "0" ]; then
      read -p "Press CTRL-C to exit script, or Enter to continue anyway (script will fail)"
    else
      endtime="$(date +%s)"
      printf '%s\n' "EKS cluster created.  Elapsed time: $((($endtime-$starttime)/60)) minutes"
      printf '%s\n' "You should see your EKS cluster in the list below "
      eksctl get clusters
    fi
  fi
